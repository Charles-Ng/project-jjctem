{"ast":null,"code":"import Phaser from \"phaser\"; //import {isDown} from \"./isdown\";\n\nexport default function (x, y, game, socket) {\n  var player = {\n    socket: socket,\n    sprite: game.physics.add.sprite(x, y, \"car\").setScale(0.05),\n    playerName: null,\n    speed: 0,\n    speedText: null,\n    drive: function drive(game) {\n      //this.\n      //game.angle = this.sprite.body.rotation;\n\n      /*\n        Most of the driving logic was written by Daniel Wuggenig\n        https://www.anexia-it.com/blog/en/introduction-to-the-phaser-framework/\n        I decided to use it since this is supposed to be an introduction to multiplayer\n        online car game, his driving solution is simple and clean and fits perfectly\n        */\n      // const KEYS = {\n      //   W: Phaser.Input.Keyboard.W,\n      //   S: Phaser.Input.Keyboard.S,\n      //   A: Phaser.Input.Keyboard.A,\n      //   D: Phaser.Input.Keyboard.D\n      // }\n      // emit if the player is moving\n      this.emitPlayerData(); // drive forward if up is pressed\n\n      if (game.cursors.up.isDown && this.speed <= 400) {\n        this.speed += 20;\n      } else {\n        if (this.speed >= 20) {\n          this.speed -= 20;\n        }\n      } // Drive backwards if down is pressed down\n\n\n      if (game.cursors.down.isDown && this.speed >= -200) {\n        this.speed -= 10;\n      } else {\n        if (this.speed <= -10) {\n          this.speed += 10;\n        }\n      } // Steers the car\n\n\n      if (game.cursors.left.isDown) {\n        this.sprite.body.setAngularVelocity(-250 * (this.speed / 1000));\n      } else if (game.cursors.right.isDown) {\n        this.sprite.body.setAngularVelocity(250 * (this.speed / 1000));\n      } else {\n        this.sprite.body.setAngularVelocity(0);\n      } // this.sprite.body.velocity.x = this.speed * Math.cos((this.sprite.body.angle - 360) * 0.01745)\n      // this.sprite.body.velocity.y = this.speed * Math.sin((this.sprite.body.angle - 360) * 0.01745)\n\n\n      this.sprite.body.setVelocityX(this.speed * Math.cos((this.sprite.body.rotation - 360) * 0.01745));\n      this.sprite.body.setVelocityY(this.speed * Math.sin((this.sprite.body.rotation - 360) * 0.01745)); // Brings the player's sprite to top\n      //game.world.bringToTop(this.sprite)\n\n      this.updatePlayerName();\n      this.updatePlayerStatusText(\"speed\", this.sprite.body.x - 57, this.sprite.body.y - 39, this.speedText);\n    },\n    emitPlayerData: function emitPlayerData() {\n      // Emit the 'move-player' event, updating the player's data on the server\n      socket.emit(\"move-player\", {\n        x: this.sprite.body.x,\n        y: this.sprite.body.y,\n        angle: this.sprite.body.rotation,\n        playerName: {\n          name: this.playerName.text,\n          x: this.playerName.x,\n          y: this.playerName.y\n        },\n        speed: {\n          value: this.speed,\n          x: this.speedText.x,\n          y: this.speedText.y\n        }\n      });\n    },\n    updatePlayerName: function updatePlayerName() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.socket.id;\n      var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.sprite.body.x - 57;\n      var y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.sprite.body.y - 59;\n      // Updates the player's name text and position\n      this.playerName.text = String(name);\n      this.playerName.x = x;\n      this.playerName.y = y; // Bring the player's name to top\n      //game.world.bringToTop(this.playerName)\n    },\n    updatePlayerStatusText: function updatePlayerStatusText(status, x, y, text) {\n      // Capitalize the status text\n      var capitalizedStatus = status[0].toUpperCase() + status.substring(1);\n      var newText = \"\"; // Set the speed text to either 0 or the current speed\n\n      this[status] < 0 ? this.newText = 0 : this.newText = this[status]; // Updates the text position and string\n\n      text.x = x;\n      text.y = y;\n      text.text = \"\".concat(capitalizedStatus, \": \").concat(parseInt(this.newText)); //game.world.bringToTop(text)\n    }\n  };\n  return player;\n}","map":{"version":3,"sources":["/Users/julia/Google Drive/University/Fourth Year Sem 2/CSCC09/project-jjctem/frontend/src/scenes/player.js"],"names":["Phaser","x","y","game","socket","player","sprite","physics","add","setScale","playerName","speed","speedText","drive","emitPlayerData","cursors","up","isDown","down","left","body","setAngularVelocity","right","setVelocityX","Math","cos","rotation","setVelocityY","sin","updatePlayerName","updatePlayerStatusText","emit","angle","name","text","value","id","String","status","capitalizedStatus","toUpperCase","substring","newText","parseInt"],"mappings":"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","sourcesContent":["import Phaser from \"phaser\";\n//import {isDown} from \"./isdown\";\n\nexport default function(x, y, game, socket) {\n  const player = {\n    socket,\n    sprite: game.physics.add.sprite(x, y, \"car\").setScale(0.05),\n    playerName: null,\n    speed: 0,\n\n    speedText: null,\n    drive(game) {\n      //this.\n      //game.angle = this.sprite.body.rotation;\n      /*\n        Most of the driving logic was written by Daniel Wuggenig\n        https://www.anexia-it.com/blog/en/introduction-to-the-phaser-framework/\n        I decided to use it since this is supposed to be an introduction to multiplayer\n        online car game, his driving solution is simple and clean and fits perfectly\n        */\n\n      // const KEYS = {\n      //   W: Phaser.Input.Keyboard.W,\n      //   S: Phaser.Input.Keyboard.S,\n      //   A: Phaser.Input.Keyboard.A,\n      //   D: Phaser.Input.Keyboard.D\n      // }\n\n      // emit if the player is moving\n      this.emitPlayerData();\n\n      // drive forward if up is pressed\n      if (game.cursors.up.isDown && this.speed <= 400) {\n        this.speed += 20;\n      } else {\n        if (this.speed >= 20) {\n          this.speed -= 20;\n        }\n      }\n\n      // Drive backwards if down is pressed down\n      if (game.cursors.down.isDown && this.speed >= -200) {\n        this.speed -= 10;\n      } else {\n        if (this.speed <= -10) {\n          this.speed += 10;\n        }\n      }\n\n      // Steers the car\n      if (game.cursors.left.isDown) {\n        this.sprite.body.setAngularVelocity(-250 * (this.speed / 1000));\n      } else if (game.cursors.right.isDown) {\n        this.sprite.body.setAngularVelocity(250 * (this.speed / 1000));\n      } else {\n        this.sprite.body.setAngularVelocity(0);\n      }\n\n      // this.sprite.body.velocity.x = this.speed * Math.cos((this.sprite.body.angle - 360) * 0.01745)\n      // this.sprite.body.velocity.y = this.speed * Math.sin((this.sprite.body.angle - 360) * 0.01745)\n      this.sprite.body.setVelocityX(\n        this.speed * Math.cos((this.sprite.body.rotation - 360) * 0.01745)\n      );\n      this.sprite.body.setVelocityY(\n        this.speed * Math.sin((this.sprite.body.rotation - 360) * 0.01745)\n      );\n\n      // Brings the player's sprite to top\n      //game.world.bringToTop(this.sprite)\n\n      this.updatePlayerName();\n      this.updatePlayerStatusText(\n        \"speed\",\n        this.sprite.body.x - 57,\n        this.sprite.body.y - 39,\n        this.speedText\n      );\n    },\n    emitPlayerData() {\n      // Emit the 'move-player' event, updating the player's data on the server\n      socket.emit(\"move-player\", {\n        x: this.sprite.body.x,\n        y: this.sprite.body.y,\n        angle: this.sprite.body.rotation,\n        playerName: {\n          name: this.playerName.text,\n          x: this.playerName.x,\n          y: this.playerName.y\n        },\n        speed: {\n          value: this.speed,\n          x: this.speedText.x,\n          y: this.speedText.y\n        }\n      });\n    },\n    updatePlayerName(\n      name = this.socket.id,\n      x = this.sprite.body.x - 57,\n      y = this.sprite.body.y - 59\n    ) {\n      // Updates the player's name text and position\n      this.playerName.text = String(name);\n      this.playerName.x = x;\n      this.playerName.y = y;\n      // Bring the player's name to top\n      //game.world.bringToTop(this.playerName)\n    },\n    updatePlayerStatusText(status, x, y, text) {\n      // Capitalize the status text\n      const capitalizedStatus = status[0].toUpperCase() + status.substring(1);\n      let newText = \"\";\n      // Set the speed text to either 0 or the current speed\n      this[status] < 0 ? (this.newText = 0) : (this.newText = this[status]);\n      // Updates the text position and string\n      text.x = x;\n      text.y = y;\n      text.text = `${capitalizedStatus}: ${parseInt(this.newText)}`;\n      //game.world.bringToTop(text)\n    }\n  };\n  return player;\n}\n"]},"metadata":{},"sourceType":"module"}