{"ast":null,"code":"import _classCallCheck from \"/Users/julia/Google Drive/University/Fourth Year Sem 2/CSCC09/project-jjctem/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/julia/Google Drive/University/Fourth Year Sem 2/CSCC09/project-jjctem/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/julia/Google Drive/University/Fourth Year Sem 2/CSCC09/project-jjctem/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/julia/Google Drive/University/Fourth Year Sem 2/CSCC09/project-jjctem/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/julia/Google Drive/University/Fourth Year Sem 2/CSCC09/project-jjctem/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport Phaser from \"phaser\";\nimport player from \"./player\";\nimport { createText } from \"./isdown.js\"; //import createPlayer from \"./createPlayer.js\";\n\nimport { GAME_HEIGHT, GAME_WIDTH } from \"./config\";\nimport openSocket from \"socket.io-client\";\nimport io from \"socket.io-client\"; //const s_ip = 'https://forumla0.herokuapp.com/';\n// const socket = openSocket(\"http://localhost:8000\");\n//const  socket = openSocket('https://forumla0.herokuapp.com/');\n// const socket = io(\"http://localhost:3000\");\n//const socket = io('https://forumla0.herokuapp.com/');\n// const socket = io(\"http://formula0.julesyan.com:8000\");\n\nvar socket = io('http://localhost:8000');\nvar otherPlayers = {};\n\nvar Race =\n/*#__PURE__*/\nfunction (_Phaser$Scene) {\n  _inherits(Race, _Phaser$Scene);\n\n  function Race() {\n    _classCallCheck(this, Race);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Race).apply(this, arguments));\n  }\n\n  _createClass(Race, [{\n    key: \"preload\",\n    value: function preload() {\n      this.load.image(\"universe\", \"assets/universe.png\");\n      this.load.image(\"car\", \"assets/dog.png\");\n      this.load.image(\"tileset\", \"assets/Tiles/trackSVG.svg\");\n      this.load.tilemapTiledJSON(\"track\", \"assets/Tiles/Race Track 3.json\");\n    }\n  }, {\n    key: \"create\",\n    value: function create() {\n      var _this = this;\n\n      //socket = openSocket(s_ip);\n      // Here we set the bounds of our game world\n      this.physics.world.setBounds(0, 0, GAME_WIDTH, GAME_HEIGHT); // creating cursors\n\n      this.cursors = this.input.keyboard.createCursorKeys(); //making background\n      // let groundTiles = [];\n      // for (let i = 0; i <= GAME_HEIGHT / 64 + 1; i++) {\n      //   for (let j = 0; j <= GAME_WIDTH / 64 + 1; j++) {\n      //     const groundSprite = this.add.sprite(i * 64, j * 64, \"asphalt\");\n      //     groundTiles.push(groundSprite);\n      //   }\n      // }\n\n      var background_image = this.add.sprite(GAME_WIDTH / 2, GAME_HEIGHT / 2, \"universe\");\n      background_image.height = this.GAME_HEIGHT;\n      background_image.width = this.GAME_WIDTH;\n      var map = this.make.tilemap({\n        key: \"track\"\n      });\n      var tileset = map.addTilesetImage(\"trackSVG\", \"tileset\");\n      var background = map.createStaticLayer(\"Tile Layer 2\", tileset, 0, 0);\n      var bumper = map.createStaticLayer(\"Tile Layer 1\", tileset, 0, 0);\n      bumper.setCollisionByProperty({\n        collides: true\n      }); // testing text\n\n      var text = this.add.text(250, 250, \"Doggo race\", {\n        backgroundColor: \"black\",\n        color: \"blue\",\n        fontSize: 48\n      }); //this.speed = 0;\n      // create local player(car)\n\n      this.player = player(50, 550, this, socket);\n      this.player.playerName = createText(this, this.player.sprite.body);\n      this.player.speedText = createText(this, this.player.sprite.body); // this.car = this.physics.add.sprite(50, 800, \"car\").setScale(0.5);\n      //createPlayer(socket, this.player);\n\n      socket.emit(\"newPlayer\", {\n        x: this.player.sprite.body.x,\n        y: this.player.sprite.body.y,\n        angle: this.player.sprite.rotation,\n        playerName: {\n          name: String(socket.id),\n          x: this.player.playerName.x,\n          y: this.player.playerName.y\n        },\n        speed: {\n          value: this.player.speed,\n          x: this.player.speedText.x,\n          y: this.player.speedText.y\n        }\n      }); // //this.angle = this.car.rotation;\n      // this.car.speed = 0;\n\n      this.player.sprite.setCollideWorldBounds(true);\n      this.physics.add.collider(this.player.sprite, bumper);\n      socket.on(\"update-players\", function (playersData) {\n        //console.log(playersData);\n        var playersFound = {}; // Iterate over all players\n\n        for (var index in playersData) {\n          var data = playersData[index]; // In case a player hasn't been created yet\n          // We make sure that we won't create a second instance of it\n\n          if (otherPlayers[index] === undefined && index !== socket.id) {\n            var newPlayer = player(data.x, data.y, _this);\n            newPlayer.playerName = createText(_this, newPlayer);\n            newPlayer.speedText = createText(_this, newPlayer);\n            newPlayer.updatePlayerName(data.playerName.name, data.playerName.x, data.playerName.y);\n            otherPlayers[index] = newPlayer;\n          }\n\n          playersFound[index] = true; // Update players data\n\n          if (index !== socket.id) {\n            // Update players target but not their real position\n            otherPlayers[index].target_x = data.x;\n            otherPlayers[index].target_y = data.y;\n            otherPlayers[index].target_rotation = data.angle;\n            otherPlayers[index].playerName.target_x = data.playerName.x;\n            otherPlayers[index].playerName.target_y = data.playerName.y;\n            otherPlayers[index].speedText.target_x = data.speed.x;\n            otherPlayers[index].speedText.target_y = data.speed.y;\n            otherPlayers[index].speed = data.speed.value;\n          }\n        } // Check if there's no missing players, if there is, delete them\n\n\n        for (var id in otherPlayers) {\n          if (!playersFound[id]) {\n            otherPlayers[id].sprite.destroy();\n            otherPlayers[id].playerName.destroy();\n            otherPlayers[id].speedText.destroy();\n            delete otherPlayers[id];\n          }\n        }\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.player.drive(this);\n\n      for (var id in otherPlayers) {\n        // console.log(otherPlayers);\n        var _player = otherPlayers[id];\n\n        if (_player.target_x !== undefined) {\n          // Interpolate the player's position\n          _player.sprite.x += (_player.target_x - _player.sprite.body.x) * 0.3;\n          _player.sprite.y += (_player.target_y - _player.sprite.body.y) * 0.3;\n          var angle = _player.target_rotation; // let direction =\n          //   ((angle - player.sprite.rotation) / (Math.PI * 2)) * 0.3;\n          // direction -= Math.round(direction);\n          // direction *= Math.PI * 2;\n\n          _player.sprite.rotation = angle * 0.016; // Interpolate the player's name position\n\n          _player.playerName.x += (_player.playerName.target_x - _player.playerName.x) * 0.3;\n          _player.playerName.y += (_player.playerName.target_y - _player.playerName.y) * 0.3; // Interpolate the player's speed text position\n\n          _player.speedText.x += (_player.speedText.target_x - _player.speedText.x) * 0.3;\n          _player.speedText.y += (_player.speedText.target_y - _player.speedText.y) * 0.3;\n\n          _player.updatePlayerStatusText(\"speed\", _player.speedText.x, _player.speedText.y, _player.speedText);\n        }\n      } // // drive forward if up is pressed\n      // if (this.cursors.up.isDown && this.car.speed <= 400) {\n      //   this.car.speed += 20;\n      // } else {\n      //   if (this.car.speed >= 20) {\n      //     this.car.speed -= 20;\n      //   }\n      // }\n      // // Drive backwards if down is pressed down\n      // if (this.cursors.down.isDown && this.car.speed >= -200) {\n      //   this.car.speed -= 10;\n      // } else {\n      //   if (this.car.speed <= -10) {\n      //     this.car.speed += 10;\n      //   }\n      // }\n      // // Steers the car\n      // if (this.cursors.left.isDown) {\n      //   this.car.setAngularVelocity(-250 * (this.car.speed / 1000));\n      // } else if (this.cursors.right.isDown) {\n      //   this.car.setAngularVelocity(250 * (this.car.speed / 1000));\n      // } else {\n      //   this.car.setAngularVelocity(0);\n      // }\n      // // movement of the car\n      // this.car.setVelocityX(\n      //   this.car.speed * Math.cos((this.car.angle - 360) * 0.01745)\n      // );\n      // this.car.setVelocityY(\n      //   this.car.speed * Math.sin((this.car.angle - 360) * 0.01745)\n      // );\n\n    }\n  }]);\n\n  return Race;\n}(Phaser.Scene);\n\nexport { Race as default };","map":{"version":3,"sources":["/Users/julia/Google Drive/University/Fourth Year Sem 2/CSCC09/project-jjctem/frontend/src/scenes/race.js"],"names":["Phaser","player","createText","GAME_HEIGHT","GAME_WIDTH","openSocket","io","socket","otherPlayers","Race","load","image","tilemapTiledJSON","physics","world","setBounds","cursors","input","keyboard","createCursorKeys","background_image","add","sprite","height","width","map","make","tilemap","key","tileset","addTilesetImage","background","createStaticLayer","bumper","setCollisionByProperty","collides","text","backgroundColor","color","fontSize","playerName","body","speedText","emit","x","y","angle","rotation","name","String","id","speed","value","setCollideWorldBounds","collider","on","playersData","playersFound","index","data","undefined","newPlayer","updatePlayerName","target_x","target_y","target_rotation","destroy","drive","updatePlayerStatusText","Scene"],"mappings":"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","sourcesContent":["import Phaser from \"phaser\";\nimport player from \"./player\";\nimport { createText } from \"./isdown.js\";\n//import createPlayer from \"./createPlayer.js\";\nimport { GAME_HEIGHT, GAME_WIDTH } from \"./config\";\nimport openSocket from \"socket.io-client\";\nimport io from \"socket.io-client\";\n//const s_ip = 'https://forumla0.herokuapp.com/';\n// const socket = openSocket(\"http://localhost:8000\");\n//const  socket = openSocket('https://forumla0.herokuapp.com/');\n// const socket = io(\"http://localhost:3000\");\n//const socket = io('https://forumla0.herokuapp.com/');\n// const socket = io(\"http://formula0.julesyan.com:8000\");\nconst socket = io('http://localhost:8000');\n\nlet otherPlayers = {};\nexport default class Race extends Phaser.Scene {\n  preload() {\n    this.load.image(\"universe\", \"assets/universe.png\");\n    this.load.image(\"car\", \"assets/dog.png\");\n    this.load.image(\"tileset\", \"assets/Tiles/trackSVG.svg\");\n    this.load.tilemapTiledJSON(\"track\", \"assets/Tiles/Race Track 3.json\");\n  }\n  create() {\n    //socket = openSocket(s_ip);\n    // Here we set the bounds of our game world\n    this.physics.world.setBounds(0, 0, GAME_WIDTH, GAME_HEIGHT);\n    // creating cursors\n    this.cursors = this.input.keyboard.createCursorKeys();\n    //making background\n    // let groundTiles = [];\n    // for (let i = 0; i <= GAME_HEIGHT / 64 + 1; i++) {\n    //   for (let j = 0; j <= GAME_WIDTH / 64 + 1; j++) {\n    //     const groundSprite = this.add.sprite(i * 64, j * 64, \"asphalt\");\n    //     groundTiles.push(groundSprite);\n    //   }\n    // }\n    let background_image = this.add.sprite(\n      GAME_WIDTH / 2,\n      GAME_HEIGHT / 2,\n      \"universe\"\n    );\n    background_image.height = this.GAME_HEIGHT;\n    background_image.width = this.GAME_WIDTH;\n    let map = this.make.tilemap({ key: \"track\" });\n    let tileset = map.addTilesetImage(\"trackSVG\", \"tileset\");\n    let background = map.createStaticLayer(\"Tile Layer 2\", tileset, 0, 0);\n    let bumper = map.createStaticLayer(\"Tile Layer 1\", tileset, 0, 0);\n    bumper.setCollisionByProperty({ collides: true });\n    // testing text\n    const text = this.add.text(250, 250, \"Doggo race\", {\n      backgroundColor: \"black\",\n      color: \"blue\",\n      fontSize: 48\n    });\n    //this.speed = 0;\n    // create local player(car)\n    this.player = player(50, 550, this, socket);\n    this.player.playerName = createText(this, this.player.sprite.body);\n    this.player.speedText = createText(this, this.player.sprite.body);\n\n    // this.car = this.physics.add.sprite(50, 800, \"car\").setScale(0.5);\n    //createPlayer(socket, this.player);\n\n    socket.emit(\"newPlayer\", {\n      x: this.player.sprite.body.x,\n      y: this.player.sprite.body.y,\n      angle: this.player.sprite.rotation,\n      playerName: {\n        name: String(socket.id),\n        x: this.player.playerName.x,\n        y: this.player.playerName.y\n      },\n      speed: {\n        value: this.player.speed,\n        x: this.player.speedText.x,\n        y: this.player.speedText.y\n      }\n    });\n    // //this.angle = this.car.rotation;\n    // this.car.speed = 0;\n    this.player.sprite.setCollideWorldBounds(true);\n    this.physics.add.collider(this.player.sprite, bumper);\n\n    socket.on(\"update-players\", playersData => {\n      //console.log(playersData);\n      let playersFound = {};\n      // Iterate over all players\n      for (let index in playersData) {\n        const data = playersData[index];\n        // In case a player hasn't been created yet\n        // We make sure that we won't create a second instance of it\n        if (otherPlayers[index] === undefined && index !== socket.id) {\n          const newPlayer = player(data.x, data.y, this);\n          newPlayer.playerName = createText(this, newPlayer);\n          newPlayer.speedText = createText(this, newPlayer);\n          newPlayer.updatePlayerName(\n            data.playerName.name,\n            data.playerName.x,\n            data.playerName.y\n          );\n          otherPlayers[index] = newPlayer;\n        }\n\n        playersFound[index] = true;\n\n        // Update players data\n        if (index !== socket.id) {\n          // Update players target but not their real position\n          otherPlayers[index].target_x = data.x;\n          otherPlayers[index].target_y = data.y;\n          otherPlayers[index].target_rotation = data.angle;\n\n          otherPlayers[index].playerName.target_x = data.playerName.x;\n          otherPlayers[index].playerName.target_y = data.playerName.y;\n\n          otherPlayers[index].speedText.target_x = data.speed.x;\n          otherPlayers[index].speedText.target_y = data.speed.y;\n\n          otherPlayers[index].speed = data.speed.value;\n        }\n      }\n\n      // Check if there's no missing players, if there is, delete them\n      for (let id in otherPlayers) {\n        if (!playersFound[id]) {\n          otherPlayers[id].sprite.destroy();\n          otherPlayers[id].playerName.destroy();\n          otherPlayers[id].speedText.destroy();\n          delete otherPlayers[id];\n        }\n      }\n    });\n  }\n\n  update() {\n    this.player.drive(this);\n    for (let id in otherPlayers) {\n      // console.log(otherPlayers);\n      let player = otherPlayers[id];\n      if (player.target_x !== undefined) {\n        // Interpolate the player's position\n\n        player.sprite.x += (player.target_x - player.sprite.body.x) * 0.3;\n\n        player.sprite.y += (player.target_y - player.sprite.body.y) * 0.3;\n\n        let angle = player.target_rotation;\n\n        // let direction =\n        //   ((angle - player.sprite.rotation) / (Math.PI * 2)) * 0.3;\n        // direction -= Math.round(direction);\n        // direction *= Math.PI * 2;\n        player.sprite.rotation = angle * 0.016;\n\n        // Interpolate the player's name position\n        player.playerName.x +=\n          (player.playerName.target_x - player.playerName.x) * 0.3;\n        player.playerName.y +=\n          (player.playerName.target_y - player.playerName.y) * 0.3;\n\n        // Interpolate the player's speed text position\n        player.speedText.x +=\n          (player.speedText.target_x - player.speedText.x) * 0.3;\n        player.speedText.y +=\n          (player.speedText.target_y - player.speedText.y) * 0.3;\n\n        player.updatePlayerStatusText(\n          \"speed\",\n          player.speedText.x,\n          player.speedText.y,\n          player.speedText\n        );\n      }\n    }\n    // // drive forward if up is pressed\n    // if (this.cursors.up.isDown && this.car.speed <= 400) {\n    //   this.car.speed += 20;\n    // } else {\n    //   if (this.car.speed >= 20) {\n    //     this.car.speed -= 20;\n    //   }\n    // }\n\n    // // Drive backwards if down is pressed down\n    // if (this.cursors.down.isDown && this.car.speed >= -200) {\n    //   this.car.speed -= 10;\n    // } else {\n    //   if (this.car.speed <= -10) {\n    //     this.car.speed += 10;\n    //   }\n    // }\n\n    // // Steers the car\n    // if (this.cursors.left.isDown) {\n    //   this.car.setAngularVelocity(-250 * (this.car.speed / 1000));\n    // } else if (this.cursors.right.isDown) {\n    //   this.car.setAngularVelocity(250 * (this.car.speed / 1000));\n    // } else {\n    //   this.car.setAngularVelocity(0);\n    // }\n\n    // // movement of the car\n    // this.car.setVelocityX(\n    //   this.car.speed * Math.cos((this.car.angle - 360) * 0.01745)\n    // );\n    // this.car.setVelocityY(\n    //   this.car.speed * Math.sin((this.car.angle - 360) * 0.01745)\n    // );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}